def write_file(tts, P, month, year):
    #Write into save_file.txt
    file.write(str(month)+";"+str(year)+";"+str(tts)+";"+ str(P)+'\n')
def print_data(month, year, P, bGrowth):
    print("Month: "+str(month)+" Year: "+ str(year))
    print("Population: " + str(P)+"K")
    print("Growth: "+str(bGrowth))



#Most basic UI code

window=Tk()
window.title("Test")
window.geometry("300x200+10+10")

btn=Button(window, text="Test Button", fg="blue")
btn.place(x=80, y=100)

lbl=Label(window, text="Little Happy Label widget", fg="red", font=("Helvetica", 16))
lbl.place(x=40, y=10)

window.mainloop()

#other GUI code

def main():
    pygame.init()

    logo = pygame.image.load("logo.png")
    pygame.display.set_icon(logo)
    pygame.display.set_caption("minimal program")

    screen = pygame.display.set_mode((512,512))

    image = pygame.image.load("tile_city.png")
    screen.blit(image, (64,64))
    pygame.display.flip()

    
    running = True

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
		break

if __name__=="__main__":
    main()

#More GUI code - Grid of Buttons

import time
from random import *
import PySimpleGUI as sg
from tkinter import *

root = Tk()
frame=Frame(root)
Grid.rowconfigure(root, 0, weight=1)
Grid.columnconfigure(root, 0, weight=1)
frame.grid(row=0, column=0, sticky=N+S+E+W)
grid=Frame(frame)
grid.grid(sticky=N+S+E+W, column=0, row=7, columnspan=2)
Grid.rowconfigure(frame, 7, weight=1)
Grid.columnconfigure(frame, 0, weight=1)

#example values
for x in range(10):
    for y in range(5):
        btn = Button(frame)
        btn.grid(column=x, row=y, sticky=N+S+E+W)

for x in range(10):
  Grid.columnconfigure(frame, x, weight=1)

for y in range(5):
  Grid.rowconfigure(frame, y, weight=1)

root.mainloop()

#Alot of Code

def compute_gini(model):
    agent_wealths = [agent.wealth for agent in model.schedule.agents]
    x = sorted(agent_wealths)
    N = model.num_agents
    B = sum(xi*(N-i) for i,xi in enumerate(x))/(N*sum(x))
    return (1+(1/N)-2*B)

class MoneyAgent(Agent):
    #Agent with fixed start wealth
    def __init__(self, unique_id, model):
        super().__init__(unique_id, model)
        self.wealth = 1
        self.name = ""
    def move(self):
        possible_steps = self.model.grid.get_neighborhood(self.pos, moore=True, include_center = False)
        new_position = self.random.choice(possible_steps)
        self.model.grid.move_agent(self, new_position)
    def give_money(self):
        cellmates = self.model.grid.get_cell_list_contents([self.pos])
        if len(cellmates) > 1:
            other = self.random.choice(cellmates)
            other.wealth +=1
            self.wealth -=1   
    def step(self):
        self.move()
        if self.wealth > 0:
            self.give_money()
        print("Agent "+str(self.name)+" acted and has "+str(self.wealth)+" wealth.")

class MoneyModel(Model):
    def __init__(self, N, width, height):
        self.num_agents = N
        self.grid = MultiGrid(width, height, True)
        self.schedule = RandomActivation(self)
        #Creator of Agents
        for i in range(self.num_agents):
            name = random.choice(nameListM)
            a = MoneyAgent(i, self)
            self.name = name
            self.schedule.add(a)

            x = self.random.randrange(self.grid.width)
            y = self.random.randrange(self.grid.height)
            self.grid.place_agent(a, (x, y))
        self.datacollector = DataCollector(
            model_reporters={"Gini": compute_gini},
            agent_reporters={"Wealth": "wealth"})
    def step(self):
        self.datacollector.collect(self)
        self.schedule.step()


model = MoneyModel(10, 10, 10)

for i in range(30):
    model.step()

agent_counts = np.zeros((model.grid.width, model.grid.height))
for cell in model.grid.coord_iter():
    cell_content, x, y = cell
    agent_count = len(cell_content)
    agent_counts[x][y] = agent_count
gini = model.datacollector.get_model_vars_dataframe()
gini.plot()
#plt.imshow(agent_counts, interpolation='nearest')
#plt.colorbar()
plt.show()

#while running == True:
#    model.step()
#    print("")
#    run +=1
#
#    if run == 20:
#        running = False
#        agent_wealth = [a.wealth for a in model.schedule.agents]
#        plt.hist(agent_wealth)
#        plt.show()

